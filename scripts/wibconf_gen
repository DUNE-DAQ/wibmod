#!/usr/bin/env python3

import json
import os
import math
import sys
import glob
import rich.traceback
from rich.console import Console
from os.path import exists, join
from daqconf.core.system import System
from daqconf.core.conf_utils import make_app_command_data
from daqconf.core.config_file import generate_cli_from_schema
from daqconf.core.metadata import write_metadata_file

CLOCK_SPEED_HZ = 50000000

# Add -h as default help option
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

console = Console()

# Set moo schema search path
from dunedaq.env import get_moo_model_path
import moo.io
moo.io.default_load_path = get_moo_model_path()

import click

@click.command(context_settings=CONTEXT_SETTINGS)
@generate_cli_from_schema('wibmod/confgen.jsonnet', 'wibmod_gen')
@click.option('--debug', default=False, is_flag=True, help="Switch to get a lot of printout and dot files")
@click.argument('json_dir', type=click.Path())
def cli(config, debug, json_dir):

    if exists(json_dir):
        raise RuntimeError(f"Directory {json_dir} already exists")

    config_data = config[0]
    config_file = config[1]

    moo.otypes.load_types('wibmod/confgen.jsonnet')
    import dunedaq.wibmod.confgen as confgen
    moo.otypes.load_types('daqconf/confgen.jsonnet')
    import dunedaq.daqconf.confgen as daqconf

    boot = daqconf.boot(**config_data.boot)
    if debug: console.log(f"boot configuration object: {boot.pod()}")

    ## etc...
    wibmod = confgen.wibmod(**config_data.wibmod)
    if debug: console.log(f"wibmod configuration object: {wibmod.pod()}")

    console.log('Loading wibapp config generator')
    from wibmod.wibapp import wibapp_gen

    the_system = System()

    # add wib apps
    wibservers = { w['name']:w['address'] for w in wibmod.wibserver }
    protowibs  = { w['name']:w['address'] for w in wibmod.protowib  }
    print(wibservers,protowibs)

    for k,v in protowibs.items():
        the_system.apps[k]=wibapp_gen.get_wib_app(
            nickname     = k,
            endpoint     = v,
            version      = 1,
            gain         = wibmod.gain,
            shaping_time = wibmod.shaping_time,
            baseline     = wibmod.baseline,
            pulse_dac    = wibmod.pulse_dac,
            pulser       = wibmod.pulser,
            buf          = wibmod.buffering,
            host         = wibmod.host_wib,
        )

    for k,v in wibservers.items():
        the_system.apps[k]=wibapp_gen.get_wib_app(
            nickname     = k,
            endpoint     = v,
            version      = 2,
            gain         = wibmod.gain,
            shaping_time = wibmod.shaping_time,
            baseline     = wibmod.baseline,
            pulse_dac    = wibmod.pulse_dac,
            pulser       = wibmod.pulser,
            buf          = wibmod.buffering,
            host         = wibmod.host_wib
        )

    ####################################################################
    # Application command data generation
    ####################################################################

    # Arrange per-app command data into the format used by util.write_json_files()
    app_command_datas = {
        name : make_app_command_data(the_system, app,name, verbose=debug)
        for name,app in the_system.apps.items()
    }

    # Make boot.json config
    from daqconf.core.conf_utils import make_system_command_datas, write_json_files
    system_command_datas = make_system_command_datas(
        boot,
        the_system,
        verbose=debug
    )

    write_json_files(app_command_datas, system_command_datas, json_dir)

    console.log(f"Wibs app config generated in {json_dir}")

    write_metadata_file(json_dir, "wibconf_gen", config_file)

if __name__ == '__main__':
    try:
        cli(show_default=True, standalone_mode=True)
    except Exception as e:
        console.print_exception()
